import pandas as pd
import numpy as np

def calculate_Lo(df):
    """
    Calculates the deep water wave length
    """
    g = 9.81 # in m/s2
    Lo = (g*df.Tp*df.Tp)/(2.*np.pi)
    return Lo



def determine_waveDepth(df):
    """
    Determines whether a wave is in deep, intermediate, or shallow water

    """
    # create a list of conditions
    conditions = [
    # Shallow water
    (df.water_depth < (1./50.)*df.Lo),
    # Intermediate water
    (df.water_depth >= (1./50.)*df.Lo) & (df.water_depth <= (1./2.)*df.Lo),
    # Deep water
    (df.water_depth > (1./2.)*df.Lo)]

    # create a list of the values we want to assign for each condition
    values = ['shallow', 'intermediate', 'deep']

    # create a new column and use np.select to assign values to it using our lists as arguments
    df['wave_depth'] = np.select(conditions, values)

    return df.wave_depth


def reverse_shoal_intermediate(df):
    """
    Computes deep water wave height assuming an intermediate wave depth condition.
    """
    g = 9.81 #in m/s2
    y = 4.03 * df.water_depth / (df.Tp ** 2)
    kd2 = y ** 2 + y / (
        1
        + (0.666 * y)
        + (0.355 * y ** 2)
        + (0.161 * y ** 3)
        + (0.0632 * y ** 4)
        + (0.0218 * y ** 5)
        + (0.00564 * y ** 6)
    )
    kh = np.sqrt(kd2)
    Cg = (
        g
        * df.Tp
        / (2 * np.pi)
        * (np.tanh(kh))
        * (0.5 * (1 + 2 * kh / np.sinh(2 * kh)))
    )
    Cgo = 1 / 4 * g * df.Tp / np.pi
    Ks = np.sqrt(Cgo / Cg)
    Hs0 = df.Hs / Ks
    return Hs0 


def reverse_shoal(df):
    """
    Calculates the deep water wave height given an inshore wave height at a
    particular depth

    Refer to: https://github.com/csherwood-usgs/jsed/blob/master/Runup%20and%20Reverse%20Shoaling%2C%20USGS.html
    And: https://csherwood-usgs.github.io/jsed/Runup%20and%20Reverse%20Shoaling,%20USGS.html

    Args:
        df: Input dataframe with column for water_depth, Tp, and Hs
        g: Acceleration due to gravity
        wave_depth: Indicates whether wave is in deep, intermediate, or shallow water.

    Returns:
        Pandas series of reverse shoalled wave heights

    Note: only deals with intermediate and deep water wave conditions. Will return NaN if the wave meets a shallow water condition.

    Uses an approximation to solve dispersion eq too

    """

    # New column
    df['Ho_calc'] = np.nan

    # Evaluate in deep water
    mask_deep = (df.wave_depth == 'deep')
    df['Ho_calc'][mask_deep] = df.Hs 

    # Evaluate in intermediate water
    mask_int = (df.wave_depth== "intermediate")
    df['Ho_calc'][mask_int] = reverse_shoal_intermediate(df[mask_int])

    return  df['Ho_calc'].values

    # Remove this calculation column now
    df = df.drop(['Ho_calc'], axis=1)

