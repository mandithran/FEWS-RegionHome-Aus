from datetime import datetime, timedelta
import pandas as pd
import pytz
import os

class fewsForecast:

    def __init__(self):

        # Basic
        self.systemTime = None
        self.roundedTime = None
        self.regionHome = None
        self.mode = None
        self.forecastDir = None
        self.roundedTimeStr = None

        # Time of model run in UTC
        self.runTime = datetime.now().astimezone(pytz.utc)

        #Hotspot info
        self.regionsDF = None
        self.hotspotDF = None

        # Outputs
        self.blankDiagFilePath = None

    def determineMode(self):
        """
        Determines whether running in hindcast mode or forecast mode.
        If the time is earlier than a two weeks ago, 
        it's in hindcast mode. Otherwise it's in forecast mode.

        The purpose of this function is to direct the EWS to download
        the BoM forecasts from the correct location. If recent, they are
        stored on the BoM servers. If running an older hindcast, they
        are stored either locally or on the WRL1 drive. 
        """
        if self.roundedTime <= self.runTime - timedelta(days=14):
            self.mode = "hindcast"
        else:
            self.mode = "forecast"

    def load_regions(self):
        """
        Loads regions (in [Region Home]\Config\MapLayerFiles) into dataframe.
        """
        regionsDir = os.path.join(self.regionHome,"Config\MapLayerFiles","ausStates.csv")
        self.regionsDF = pd.read_csv(regionsDir)


    # Function to load up hotspot site location sets as df
    def load_hotspots(self):
        """
        Loads hotspots (in [Region Home]\Config\MapLayerFiles) into dataframe.
        """
        hotspotSitesDir = os.path.join(self.regionHome,"Config\MapLayerFiles", "hotspotLocations.csv")
        self.hotspotDF = pd.read_csv(hotspotSitesDir)

    def printAttributes(self):
        """
        Prints all the attributes of any instance of any fews forecasting object
        """
        temp = vars(self)
        for item in temp:
            print(item, ":", temp[item])


# Untilizes composition rather than class inheritance.
# hotspotForecast class not dependent on fewsForecast class
# But it contains an instance of the fewsForecast class so that it can grab its properties and methods
class hotspotForecast:
    
    def __init__(self,fewsForecast, siteName):
        self._fewsForecast = fewsForecast
        # Type of forecast (hotspot)
        self.type = "hotspot"
        # Hotspot forecast run time will be different to the overall FEWS run time
        self.runTime = datetime.now().astimezone(pytz.utc)
        # Site name
        self.siteName = siteName
        # Hotspot information given by Location set
        self.hotspotInfo = None
        # Region
        self.region = None
        # Spin up window (in hours)
        self.spinUpWindow = timedelta(hours=12)
        # Run name
        self.runName = None
        # Preprocessed flag
        self.preProcessed = False
        # Forecast horizon
        #self.forecastHorizon = timedelta(hours=int(1)) # in days, datetime object
        self.forecastHorizon = timedelta(days=int(7)) # in days, datetime object
        # Delta t for input time series
        self.deltat = None
        # String for system time
        self.systemTimeStr = None
        self.dummyPtX = None
        self.dummyPtY = None
        self.totalRunTime = None
        self.stormPeriods = None

        ######## Paths ########
        # Forecast directory
        self.forecastDir = None
        # XBeach module directory (where model is actually run)
        self.moduleDir =  None
        # XBeach work directory
        self.xbWorkDir = None
        self.postProcessDir = None
        self.indicatorResultsDir = None
        self.inputGridsDir = None
        
        ######## Input files ########
        self.xgrdPath = None
        self.ygrdPath = None
        self.zgrdPath = None
        self.ne_layerPath = None
        self.grdNcols = None
        self.grdNrows = None
        self.dfGauges = None
        self.watlevSeries = None
        self.surgeNCPath = None

        ######## XBeach params ########
        # Time-averaged spatial output time step in seconds
        self.tintm = 900
        # Instantaneous spatial output time step in seconds
        self.tintg = 900
        self.morstart = None

    # Grab all the key properties from the main fewsForecast object
    @property
    def systemTime(self): # pass accesses to fewsForecast
        return self._fewsForecast.systemTime
    @property
    def roundedTime(self):
        return self._fewsForecast.roundedTime
    @property
    def regionHome(self):
        return self._fewsForecast.regionHome
    @property
    def mode(self):
        return self._fewsForecast.mode
    @property
    def hotspotDF(self):
        return self._fewsForecast.hotspotDF
    @property
    def roundedTimeStr(self):
        return self._fewsForecast.roundedTimeStr
    @property
    def printAttributes(self):
        return self._fewsForecast.printAttributes()
    @property
    def regionsDF(self):
        return self._fewsForecast.regionsDF
    
    def init_hotspotInfo(self):
        """Isolate the relevant site row of the pandas dataframe containing information about hotspots.
        Sets several attributes according to the information in the dataframe. This dataframe is loaded 
        by the load_hotspots() function defined for the fewsForecast class."""
        self.hotspotInfo = self.hotspotDF.loc[self.hotspotDF['ID']== self.siteName] 
        self.region = self.hotspotInfo["Region"][0]
        self.surgeSystem = self.hotspotInfo["Surge_System"][0]
        self.waveCode = self.hotspotInfo["wave_code"][0]
        self.city = self.hotspotInfo["City"][0]
        self.latSurge = self.hotspotInfo["Lat_surge"][0]
        self.lonSurge = self.hotspotInfo["Lon_surge"][0]
        self.auswaveEPSG = self.hotspotInfo["auswave_EPSG"][0]
        self.xbeachEPSG = int(self.hotspotInfo["xbeach_EPSG"][0])
        self.dummyPtX = self.hotspotInfo["dummyGaugePtX"][0]
        self.dummyPtY = self.hotspotInfo["dummyGaugePtY"][0]
        # Indicates the lat and lon on the wave mesh that is closest to the offshore buoy
        self.offshoreWaveLon = self.regionsDF["offshoreWave_lon"][0]
        self.offshoreWaveLat = self.regionsDF["offshoreWave_lat"][0]
    
    # Set and create forecast directory
    def init_directory(self):
        self.forecastDir = os.path.join(self._fewsForecast.forecastDir,
                                        self.region,
                                        self.type,
                                        self.siteName)
        if not os.path.exists(self.forecastDir):
            os.makedirs(self.forecastDir)

    def init_runInfo(self):
        # Set start time based on rounded time and spinup window
        self.startTime = self.roundedTime - self.spinUpWindow
        self.endTime = self.startTime + self.spinUpWindow + self.forecastHorizon

    def formatSystemTimeStr(self):
        self.systemTimeStr = self.systemTime.strftime("%Y%m%d%H")



class regionalForecast:
    
    def __init__(self,fewsForecast, regionName):
        self._fewsForecast = fewsForecast
        # Type of forecast (regional)
        self.type = "regional"
        # Hotspot forecast run time will be different to the overall FEWS run time
        self.runTime = datetime.now().astimezone(pytz.utc)
        # Region name
        self.regionName = regionName
        # Forecast horizon
        #self.forecastHorizon = timedelta(hours=int(1)) # in days, datetime object
        self.forecastHorizon = timedelta(days=int(7)) # in days, datetime object
        # Forecast temporal resolution(time step)
        self.deltat = timedelta(minutes=int(15))
        # Geodataframe of input profiles
        self.profiles_gdf = None

        ####### Projection info ######
        self.epsgWL = int(4326)

        ######## Paths ########
        # Forecast directory
        self.forecastDir = None
        self.inputsDir = None
        self.wlForecastDir = None

    # Grab all the key properties from the main fewsForecast object
    @property
    def systemTime(self): # pass accesses to fewsForecast
        return self._fewsForecast.systemTime
    @property
    def roundedTime(self):
        return self._fewsForecast.roundedTime
    @property
    def regionHome(self):
        return self._fewsForecast.regionHome
    @property
    def mode(self):
        return self._fewsForecast.mode
    @property
    def regionsDF(self):
        return self._fewsForecast.regionsDF
    @property
    def roundedTimeStr(self):
        return self._fewsForecast.roundedTimeStr
    @property
    def printAttributes(self):
        return self._fewsForecast.printAttributes()
    @property
    def regionsDF(self):
        return self._fewsForecast.regionsDF
    
    # Set and create forecast directory
    def init_directory(self):
        self.forecastDir = os.path.join(self._fewsForecast.forecastDir,
                                        self.regionName,
                                        self.type)
        if not os.path.exists(self.forecastDir):
            os.makedirs(self.forecastDir)

    def init_runInfo(self):
        # Set start time based on rounded time and spinup window
        self.startTime = self.roundedTime
        self.endTime = self.startTime + self.forecastHorizon
        # Isolate the relevant site row of the pandas dataframe containing information about hotspots
        self.regionInfo = self.regionsDF.loc[self.regionsDF['ID']== self.regionName]
        self.tideLocation = self.regionInfo["tide_Location"][0]