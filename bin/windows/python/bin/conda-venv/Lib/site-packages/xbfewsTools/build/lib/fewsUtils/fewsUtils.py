from datetime import datetime
import pytz

def parseFEWSTime(fewsTime=None):
    """
    Parse time coming from FEWS argument in a general adapter.
    Turns string into a datetime object.
    """
    time = datetime(int(fewsTime[:4]),
                    int(fewsTime[4:6]),
                    int(fewsTime[6:8]),
                    hour=int(fewsTime[9:11]),
                    tzinfo=pytz.utc)
    return time

def round_hours(datetimeIn, resolutionInHours):
    """round_hours(datetime, resolutionInHours) => datetime rounded to lower interval
    Works for hour resolution up to a day (e.g. cannot round to nearest week).
    """
    from datetime import datetime, timedelta
    # First zero out minutes, seconds and micros
    dtTrunc = datetimeIn.replace(minute=0,second=0, microsecond=0)
    # Figure out how many minutes we are past the last interval
    excessHours = (dtTrunc.hour) % resolutionInHours
    # Subtract off the excess minutes to get the last interval

    return dtTrunc + timedelta(hours=-excessHours)

def clearDiagLastLine(diagFile=None):
    fd=open(diagFile,"r")
    d=fd.read()
    fd.close()
    m=d.split("\n")
    s="\n".join(m[:-1])
    fd=open(diagFile,"w+")
    for i in range(len(s)):
        fd.write(s[i])
    fd.close()

def write2DiagFile(errorLevel=None, note=None):
    string = "\n<line level=\"%s\" description=\"From PYTHON: %s\"/>\n" % (errorLevel, note)
    return string

