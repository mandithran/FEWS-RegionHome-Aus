import os
import numpy as np
import pandas as pd
import xarray as xr
import re

def processSurge_nc(importDir=None, downloadDir=None, workDir=None, 
                   fname=None,site=None, siteLat=None, siteLon=None):
                    
        # =================== Paths =================== #
        ifile = os.path.join(downloadDir,fname)

        # Load dataset
        ds = xr.open_dataset(ifile)

        # Take a look at existing coordinates, dimensions, and variables
        # if verbose mode is specified
        print("NetCDF file metadata:")
        print(ds.keys)

        # ds.keys will reveal that the NetCDF file does not have lat/lon dimensions - it has a "point" and "time" dimensions
        # These "point" dimensions are essentially the index of a given point
        # The "point dimension" has the same shape as the lat and lon fields
        # This is because this is not a regular grid; each point has a unique lat, lon value
        # The following will return the index that matches the lat/lon point of interest
        # This index allows for selection of subsets of the xarray
        df = pd.DataFrame({"lon":ds.coords['lon'].values,"lat":ds.coords['lat'].values})
        ind = df[(df['lon']==siteLon) & 
                (df['lat']==siteLat)].index

        # Select surge timeseries for the point of interest
        surge = ds.surge[ind].values

        # Create new pandas df
        dfOut = pd.DataFrame({"Datetime":ds.coords['time'].values,
                        "surge (m)":surge[0]
                        })

        # Add 12-hour spin-up timeseries that retains the first value
        # of the surge forecast
        dt_delta = dfOut.Datetime[1]-dfOut.Datetime[0]
        spinUpTime = np.timedelta64(12,"h") # argument in hours
        spinUpEndTime = dfOut.Datetime[0]
        spinUpStartTime = spinUpEndTime-(spinUpTime)
        spinUp_series = pd.date_range(start=spinUpStartTime,
                                end=spinUpEndTime,
                                freq=dt_delta)
        spinUp_df = pd.DataFrame({"Datetime":spinUp_series,
                                "surge (m)":dfOut["surge (m)"][0]
                                }).set_index("Datetime")

        # Concatenate spin-up timeseries with real timeseries
        dfOut = dfOut.set_index("Datetime")
        dfOut = pd.concat([spinUp_df,dfOut])

        # File name based on site and date time given in original nc file
        dateTime = re.split("[_.]", fname)[3]
        ofname = "nss_%s_%s.csv" % (site, dateTime)
        ofPath = os.path.join(importDir,ofname)
        dfOut.to_csv(ofPath)
        # Send another copy to working directory
        dir2 = os.path.join(workDir,"processedSurge")
        if not os.path.exists(dir2):
                os.makedirs(dir2)
        ofPath2 = os.path.join(dir2,ofname)
        dfOut.to_csv(ofPath2)

        return ofPath 