import numpy as np
import pandas as pd

#============== Generate time series - GMT ==============#
def generateTimeSeries(xbModel=None):

    # Convert inputs to numpy timedelta64 objects
    deltat = np.timedelta64(xbModel.deltat) # timestep for water level time series
    #spinUpTime = np.timedelta64(xbModel.spinUpWindow)
    # Start is from beginning of spin-up time, increments of delta t to end time
    #roundedTime = np.datetime64(xbModel.roundedTime)
    startTime = np.datetime64(xbModel.startTime)
    endTime = np.datetime64(xbModel.endTime)

    #startTime = roundedTime - spinUpTime
    #endTime = roundedTime + np.timedelta64(3,"D") # 3-day forecast

    # Generate time series
    timeSeries = np.arange(startTime,endTime+deltat,deltat)

    # Convert to dataframe
    dfts = pd.DataFrame(timeSeries,columns=["time_gmt"])
    dfts.index = dfts['time_gmt']
    dfts = dfts.drop(columns=['time_gmt'])

    return dfts

def loadTideData(ifile=None, xbModel=None):

    #============== Load tide data - MUST BE IN GMT ==============#
    dft = pd.read_csv(ifile, names=['datetime_gmt','tide_m'], header=0)
    dft['datetime_gmt'] = pd.to_datetime(dft['datetime_gmt'], format="%d-%m-%Y %H:%M")
    dft.index=dft['datetime_gmt']
    dft = dft.drop(columns=['datetime_gmt'])
    dft = dft.tz_localize(None)
    # Slice and dice the df
    dft = dft[(dft.index >= xbModel.startTime) & (dft.index <= xbModel.endTime)]

    return dft

#============== Interpolate tidal forecast at 10 m intervals ==============#
def interpSeries(series=None, xbModel=None):

    # Convert timedelta object to a string in minutes
    deltat_min = int(round((xbModel.deltat.seconds/60),0))
    upsampled = series.resample('%sT' % deltat_min, origin=xbModel.startTime).asfreq()
    interpolated = upsampled.interpolate(method='linear')

    return interpolated


#============== Load surge data - MUST BE IN GMT ==============#
    # Parse rounded system time for filename

def loadSurgeData(surgePath=None, xbModel=None):

    dfs = pd.read_csv(surgePath, names=['datetime_gmt','surge_m'], header=0)
    dfs['datetime_gmt'] = pd.to_datetime(dfs['datetime_gmt'], format="%Y-%m-%d %H:%M:%S")
    dfs.index=dfs['datetime_gmt']
    dfs = dfs.drop(columns=['datetime_gmt'])
    dfs = dfs.tz_localize(None)
    dfs = dfs[(dfs.index >= xbModel.startTime) & (dfs.index <= xbModel.endTime)]

    return dfs

    